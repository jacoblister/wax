(@include "test.wax")
(@include "token.wax")

(func token_parse_test_empty
    ; Given
    (let test (struct test_test) (call test_init "token_parse_test_empty"))
    (let source str	"")

    ; When
    (let tokens (arr str) (call token_parse source))

    ; Then
    (call test_assert_equal test (cast 0 str) (cast (# tokens) str) "correct number of tokens")
)

(func token_parse_test_single_word
    ; Given
    (let test (struct test_test) (call test_init "token_parse_test_simple"))
    (let source str	"main\n")

    ; When
    (let tokens (arr str) (call token_parse source))

    ; Then
    ; Bug - will fail without terminating newline
    (call test_assert_equal test (cast 1 str) (cast (# tokens) str) "correct number of tokens")
    (call test_assert_equal test "main" (get tokens 0) "correct token 0")
)

(func token_parse_test_simple
    ; Given
    (let test (struct test_test) (call test_init "token_parse_test_simple"))
    (let source str	"(func main)")

    ; When
    (let tokens (arr str) (call token_parse source))

    ; Then
    (call test_assert_equal test (cast 4 str) (cast (# tokens) str) "correct number of tokens")
    (call test_assert_equal test "(" (get tokens 0) "correct token 0")
    (call test_assert_equal test "func" (get tokens 1) "correct token 1")
    (call test_assert_equal test "main" (get tokens 2) "correct token 2")
    (call test_assert_equal test ")" (get tokens 3) "correct token 3")
)

(func token_parse_test_comment
    ; Given
    (let test (struct test_test) (call test_init "token_parse_test_comment"))
    (let source str	";a comment\ntoken\n")

    ; When
    (let tokens (arr str) (call token_parse source))

    ; Then
    (call test_assert_equal test (cast 1 str) (cast (# tokens) str) "correct number of tokens")
    (call test_assert_equal test "token" (get tokens 0) "correct token 0")
)

(func token_parse_test_quoted_space
    ; Given
    (let test (struct test_test) (call test_init "token_parse_test_quoted_space"))
    (let source str	"\"\\\"a = 1\\\" next\"\n")
                    
    ; When
    (let tokens (arr str) (call token_parse source))

    ; Then
    (call test_assert_equal test (cast 1 str) (cast (# tokens) str) "correct number of tokens")
    (call test_assert_equal test "\"\\\"a = 1\\\" next\"" (get tokens 0) "correct token 0")
)

(func token_parse_test_helloworld
    ; Given
    (let test (struct test_test) (call test_init "token_parse_test_helloworld"))
    (let source str	"(func main (result int)\n(print \"HelloWorld!\")\n(return 0))")

    ; When
    (let tokens (arr str) (call token_parse source))

    ; Then
    (call test_assert_equal test (cast 16 str) (cast (# tokens) str) "correct number of tokens")
)

(func main (result int)
  (call token_parse_test_empty)
  (call token_parse_test_single_word)
  (call token_parse_test_simple)
  (call token_parse_test_comment)
  (call token_parse_test_quoted_space)
  (call token_parse_test_helloworld)
  
  (return 0)
)