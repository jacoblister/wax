; ---------------------------------------------------------------------------- 
; - Tokenizer -
; ---------------------------------------------------------------------------- 
(@define TOKEN_CHAR_TAB 9)
(@define TOKEN_CHAR_NL 10)
(@define TOKEN_CHAR_SPACE 32)
(@define TOKEN_CHAR_DOUBLE_QUOTE 34)
(@define TOKEN_CHAR_SINGLE_QUOTE 39)
(@define TOKEN_CHAR_PAREN_OPEN 40)
(@define TOKEN_CHAR_PAREN_CLOSE 41)
(@define TOKEN_CHAR_SEMICOLON 59)
(@define TOKEN_CHAR_BACKSLASH 92)

(func token_parse (param input str) (result (arr str))
	(let token str (alloc str))
	(let tokens (arr str) (alloc (arr str)))
	(let in_comment int 0)
	(let in_single_quote int 0)
	(let in_double_quote int 0)
	(let in_quote int 0)
	(let in_quote_escape int 0)

	(for i 0 (< i (# input)) 1 (do
		(let c int (cast (get input i) int))

		(if in_quote_escape (then
			(set in_quote_escape 0)
		) (else
			(if (&& (! in_double_quote) (= c @TOKEN_CHAR_SINGLE_QUOTE)) (then 
				(set in_single_quote (! in_single_quote))
			))
			(if (&& (! in_single_quote) (= c @TOKEN_CHAR_DOUBLE_QUOTE)) (then 
				(set in_double_quote (! in_double_quote))
			))
			(set in_quote (|| in_single_quote in_double_quote))

			(if in_quote (then
				(if (= c @TOKEN_CHAR_BACKSLASH) (then
					(set in_quote_escape 1)
				))
			))
			(if (! in_quote) (then
				(if (= c @TOKEN_CHAR_SEMICOLON) (then
					(set in_comment 1)
				))
			))
			(if (= c @TOKEN_CHAR_NL) (then
				(if in_comment (then
					(set token "")
				))
				(set in_comment 0)
			))
		))

		(let whitespace int (|| (= c @TOKEN_CHAR_TAB) (= c @TOKEN_CHAR_SPACE) (= c @TOKEN_CHAR_NL)))
		(let paren int (|| (= c @TOKEN_CHAR_PAREN_OPEN) (= c @TOKEN_CHAR_PAREN_CLOSE)))

		(if (&& (! in_quote) (! in_comment) (|| whitespace paren)) (then
			(if (> (# token) 0) (then
				(insert tokens (# tokens) token)
			))

			(if paren (then
				(set token "")
				(<< token (get input i))
 				(insert tokens (# tokens) token)
			))

			(set token "")
			) (else 
				(<< token (get input i))
			)
		)
	))

	(return tokens)
)

(func token_write_to_output (param tokens (arr str)) 
	(print "count:")
	(print (# tokens))
	(print "")
	(for i 0 (< i (# tokens)) 1 (do
		(print (get tokens i))
	))
)

(func token_to_string (param tokens (arr str)) (param width int) (result str)
	(let s str (alloc str ""))
	(let line str (alloc str ""))
	(for i 0 (< i (# tokens)) 1 (do
		(let token str "")
		(for j 0 (< j (# (get tokens i))) 1 (do
			(let c int (get tokens i j))
			(let encoded str "")
			(<< encoded c)
			(if (= c '\"') (then
				(set encoded "\\\"")
			))
			(if (= c '\\') (then
				(set encoded "")
				(<< encoded '\\')
				(<< encoded '\\')
			))
			(<< token encoded)
		))

		(<< line token)
		(if (> (# line) width) (then
			(<< s "\"")
			(<< s line)
			(<< s "\\n\"\n")
			(set line "")
		) (else
			(if (&& 
				(<> token "(") 
				(<> token ")")
				) (then
				(<< line " ")
			))
		))
	))
	(<< s "\"")
	(<< s line)
	(<< s "\\n\"\n")

	(return s)
)
