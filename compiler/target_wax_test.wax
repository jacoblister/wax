(@include "test.wax")
(@include "node.wax")
(@include "target_wax.wax")

(func note_to_wax_test_empty
    ; Given - root node only
    (let test (struct test_test) (call test_init "note_to_wax_test_empty"))
    (let node_root (struct node) (call node_new @NODE_ROOT ""))

    ; When
    (let wax str (call node_to_wax 0 node_root))
    
    ; Then
    (call test_assert_equal test "" wax "wax source code")
)

(func note_to_wax_test_simple
    ; Given - single child node
    (let test (struct test_test) (call test_init "note_to_wax_test_empty"))
    (let node_root (struct node) (call node_new @NODE_ROOT ""))
    (let node_func (struct node) (call node_new @NODE_EXPR "func"))
    (insert (get node_root child) (# (get node_root child)) node_func)
    (let node_func_main (struct node) (call node_new @NODE_STR "main"))
    (insert (get node_func child) (# (get node_func child)) node_func_main)

    ; When
    (let wax str (call node_to_wax 0 node_root))
    
    ; Then
    (call test_assert_equal test "(func main)\n" wax "wax source code")
)

(func main (result int)
  (call note_to_wax_test_empty)
  (call note_to_wax_test_simple)

  (return (call test_result))
)