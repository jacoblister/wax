(@include "test.wax")
(@include "node.wax")

(func node_from_token_test_empty
    ; Given
    (let test (struct test_test) (call test_init "node_from_token_test_empty"))
    (let tokens (arr str) (alloc (arr str)))
    (insert tokens 0 "(")
    (insert tokens 1 ")")

    ; When
    (let node (struct node) (call node_from_tokens tokens))
    
    ; Then
    (call test_assert_equal test (cast @NODE_ROOT str) (cast (get node type) str) "root node is correct type")
    ; bug: will fail - empty list sets value to closing ')'
    ; (call test_assert_equal test 0 (# (get node child)) "root node has 0 children")
)

(func node_from_token_test_function
    ; Given
    (let test (struct test_test) (call test_init "node_from_token_test_function"))
    (let tokens (arr str) (alloc (arr str)))
    (insert tokens 0 "(")
    (insert tokens 1 "func")
    (insert tokens 2 "main")
    (insert tokens 3 ")")

    ; When
    (let node (struct node) (call node_from_tokens tokens))
    
    ; Then
    (call test_assert_equal test (cast @NODE_ROOT str) (cast (get node type) str) "root node is correct type")
    (call test_assert_equal test (cast 1 str) (cast (# (get node child)) str) "root node has 1 child")
    (call test_assert_equal test (cast @NODE_EXPR str) (cast (get node child 0 type) str) "root node child has correct type")
    (call test_assert_equal test "func" (get node child 0 value) "root node child has correct value")
    (call test_assert_equal test (cast @NODE_STR str) (cast (get node child 0 child 0 type) str) "func child has correct type")
    (call test_assert_equal test "main" (get node child 0 child 0 value) "func child has correct value")
)

(func main (result int)
  (call node_from_token_test_empty)
  (call node_from_token_test_function)

  (return 0)
)