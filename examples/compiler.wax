(@define CHAR_NL 10)
(@define CHAR_SPACE 32)
(@define CHAR_PAREN_OPEN 40)
(@define CHAR_PAREN_CLOSE 41)

(func tokens_parse (param input str) (result (arr str))
	(let token str (alloc str))
	(let tokens (arr str) (alloc (arr str)))

	(for i 0 (< i (# input)) 1 (do
		(let c int (get input i))

		(let whitespace int (|| (= c @CHAR_SPACE) (= c @CHAR_NL)))
		(let paren int (|| (= c @CHAR_PAREN_OPEN) (= c @CHAR_PAREN_CLOSE)))

		(if (|| whitespace paren) (then
			(if (<> 0 (# token)) (then
				(insert tokens (# tokens) token)
			))

			(if paren (then
				(set token "")
				(<< token c)
 				(insert tokens (# tokens) token)
			))

			(set token "")
			)
			(else
				(<< token c)
			)
		)
	))

	(return tokens)
)

(@define NODE_ROOT 0)
(@define NODE_EXPR 1)
(@define NODE_INT 2)
(@define NODE_STR 3)
(@define NODE_STR_QUOTE 4)

(struct node
	(let type int)
	(let value str)
	(let child (arr (struct node)))
)

(func prog_helloworld (result str)
	(let lines (arr str) (alloc (arr str)
		"\n"
		"(func main (result int)\n"
		"  (print \"HelloWorld!\")\n"
		"  (return 0)\n"
		")\n"
	))

	(let prog str (alloc str ""))
	(for i 0 (< i (# lines)) 1 (do
		(<< prog (get lines i))
	))

	(return prog)
)

(func prog_fib (result str)
	(let lines (arr str) (alloc (arr str)
		"(func fib (param i int) (result int)\n"
		"	(if (<= i 1) (then\n"
		"		(return i)\n"
		"	))\n"
		"	(return (+\n"
		"		(call fib (- i 1))\n"
		"		(call fib (- i 2))\n"
		"	))\n"
		")\n"
		"\n"
		"(func main (result int)\n"
		"	(let x int (call fib 9))\n"
		"	(print x)\n"
		"	(return 0)\n"
		")\n"
	))

	(let prog str (alloc str ""))
	(for i 0 (< i (# lines)) 1 (do
		(<< prog (get lines i))
	))

	(return prog)
)

(func node_new (param type int) (param value str) (result (struct node))
	(let node_new (struct node) (alloc (struct node)))
	(set node_new type type)
	(set node_new value value)
	(set node_new child (alloc (arr (struct node))))
	
	(return node_new)
)

(func node_from_tokens (param tokens (arr str)) (result (struct node))
 	(let root (struct node) (call node_new @NODE_ROOT ""))

	(let i int 0)
	
	(while (< i (# tokens)) (do
		(if (= (get tokens i) "(") (then
			(let node (struct node) 
				(call node_new @NODE_EXPR (get tokens (+ i 1)))
			)
			(insert (get root child) (# (get root child)) node)
		
			(let child (struct node) 
				(call node_new @NODE_STR (get tokens (+ i 2)))
			)
		 	(insert (get node child) (# (get node child)) child)

			(set i (+ i 2))			
		))
		(set i (+ i 1))
	))

	(return root)
)

(func node_to_wax (param depth int) (param node (struct node)) (result str)
	(let indent str (alloc str ""))
	(for i 0 (< i depth) 1 (do
		(<< indent " ")
	))

	(let s str (alloc str ""))
	
	(if (= (get node type) @NODE_ROOT) (then
		(for i 0 (< i (# (get node child))) 1 (do
			(let child str (call node_to_wax 0 (get (get node child) i)))
			(<< s child)
		))
	))

	(if (= (get node type) @NODE_EXPR) (then
		(<< s indent)
		(<< s "(")
		(<< s (get node value))
		(<< s " ")
		(for i 0 (< i (# (get node child))) 1 (do
			(let child str (call node_to_wax (+ depth 1) (get (get node child) i)))
			(<< s child)
		))
		(<< s ")")
		(<< s "\n")
	))

	(if (= (get node type) @NODE_STR) (then
		(<< s (get node value))
	))

	(if (= (get node type) @NODE_STR_QUOTE) (then
		(<< s "\"")
		(<< s (get node value))
		(<< s "\"")
	))

	(return s)
)

(func node_to_js (param depth int) (param node (struct node)) (result str)
	(let indent str (alloc str ""))
	(for i 0 (< i depth) 1 (do
		(<< indent " ")
	))
	
	(let s str (alloc str ""))
	
	(if (= (get node type) @NODE_ROOT) (then
		(for i 0 (< i (# (get node child))) 1 (do
			(let child str (call node_to_js 0 (get (get node child) i)))
			(<< s child)
		))
		
		(<< s "\n\n")
		(<< s "main()\n")
	))
	
	(if (= (get node type) @NODE_EXPR) (then
		(if (= (get node value) "func") (then
			(<< s indent)
			(<< s "function ")
			(let node_func_name (struct node) (get (get node child) 0))
 			(<< s (get node_func_name value))
			(<< s "() {\n")	; todo - params 
			
			(for i 0 (< i (# (get node child))) 1 (do
				(let child str (call node_to_js (+ depth 1) (get (get node child) i)))
				(<< s child)
			))
			
 			(<< s "}\n")
		))
		(if (= (get node value) "print") (then
			(<< s indent)
 			(<< s "console.log(\"")
			(let node_print_val (struct node) (get (get node child) 0))
 			(<< s (get node_print_val value))
			(<< s "\")")
 			(<< s "\n")
		))
		(if (= (get node value) "return") (then
			(<< s indent)
 			(<< s "return ")
			(let node_return_val (struct node) (get (get node child) 0))
 			(<< s (get node_return_val value))
 			(<< s "\n")
		))
	))
	
	(return s)
)

(func node_to_c (param depth int) (param node (struct node)) (result str)
	(return "node_to_c not implemented")
)

(func prog_helloworld_raw (result (struct node))
 	(let root (struct node) (call node_new @NODE_ROOT ""))
	
	(let hello_func (struct node) (call node_new @NODE_EXPR "func"))
 	(insert (get root child) (# (get root child)) hello_func)
	
	(let func_main (struct node) (call node_new @NODE_STR "main"))
 	(insert (get hello_func child) (# (get hello_func child)) func_main)
	
	(let func_result (struct node) (call node_new @NODE_EXPR "result"))
 	(insert (get hello_func child) (# (get hello_func child)) func_result)

	(let result_int (struct node) (call node_new @NODE_STR "int"))
 	(insert (get func_result child) (# (get func_result child)) result_int)
	
	(let func_print (struct node) (call node_new @NODE_EXPR "print"))
	(insert (get hello_func child) (# (get hello_func child)) func_print)
	
	(let print_hello (struct node) (call node_new @NODE_STR_QUOTE "Hello World!"))
 	(insert (get func_print child) (# (get func_print child)) print_hello)
	
	(let func_return (struct node) (call node_new @NODE_EXPR "return"))
	(insert (get hello_func child) (# (get hello_func child)) func_return)
	
	(let return_0 (struct node) (call node_new @NODE_STR "0"))
 	(insert (get func_return child) (# (get func_return child)) return_0)

	(return root)
)

(func main (result int)
;  	(let root (struct node) (call prog_helloworld_raw))

	(let prog str (call prog_helloworld))
;	(let prog str (call prog_fib))
	(let tokens (arr str) (call tokens_parse prog))

	(let root (struct node) (call node_from_tokens tokens))
   	
	(let out str (call node_to_wax 0 root))
;    	(let out str (call node_to_js 0 root))
	
	(print out)
	(return 0)
)
